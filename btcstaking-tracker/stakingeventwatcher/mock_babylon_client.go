// Code generated by MockGen. DO NOT EDIT.
// Source: btcstaking-tracker/stakingeventwatcher/expected_babylon_client.go

// Package stakingeventwatcher is a generated GoMock package.
package stakingeventwatcher

import (
	context "context"
	reflect "reflect"

	types "github.com/babylonlabs-io/babylon/v3/x/btccheckpoint/types"
	types0 "github.com/babylonlabs-io/babylon/v3/x/btcstaking/types"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	wire "github.com/btcsuite/btcd/wire"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonNodeAdapter is a mock of BabylonNodeAdapter interface.
type MockBabylonNodeAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonNodeAdapterMockRecorder
}

// MockBabylonNodeAdapterMockRecorder is the mock recorder for MockBabylonNodeAdapter.
type MockBabylonNodeAdapterMockRecorder struct {
	mock *MockBabylonNodeAdapter
}

// NewMockBabylonNodeAdapter creates a new mock instance.
func NewMockBabylonNodeAdapter(ctrl *gomock.Controller) *MockBabylonNodeAdapter {
	mock := &MockBabylonNodeAdapter{ctrl: ctrl}
	mock.recorder = &MockBabylonNodeAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonNodeAdapter) EXPECT() *MockBabylonNodeAdapterMockRecorder {
	return m.recorder
}

// ActivateDelegation mocks base method.
func (m *MockBabylonNodeAdapter) ActivateDelegation(ctx context.Context, stakingTxHash chainhash.Hash, proof *types.BTCSpvProof) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateDelegation", ctx, stakingTxHash, proof)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateDelegation indicates an expected call of ActivateDelegation.
func (mr *MockBabylonNodeAdapterMockRecorder) ActivateDelegation(ctx, stakingTxHash, proof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateDelegation", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).ActivateDelegation), ctx, stakingTxHash, proof)
}

// BTCDelegation mocks base method.
func (m *MockBabylonNodeAdapter) BTCDelegation(stakingTxHash string) (*Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCDelegation", stakingTxHash)
	ret0, _ := ret[0].(*Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCDelegation indicates an expected call of BTCDelegation.
func (mr *MockBabylonNodeAdapterMockRecorder) BTCDelegation(stakingTxHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCDelegation", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).BTCDelegation), stakingTxHash)
}

// BtcClientTipHeight mocks base method.
func (m *MockBabylonNodeAdapter) BtcClientTipHeight() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BtcClientTipHeight")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BtcClientTipHeight indicates an expected call of BtcClientTipHeight.
func (mr *MockBabylonNodeAdapterMockRecorder) BtcClientTipHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BtcClientTipHeight", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).BtcClientTipHeight))
}

// CometBFTTipHeight mocks base method.
func (m *MockBabylonNodeAdapter) CometBFTTipHeight(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CometBFTTipHeight", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CometBFTTipHeight indicates an expected call of CometBFTTipHeight.
func (mr *MockBabylonNodeAdapterMockRecorder) CometBFTTipHeight(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CometBFTTipHeight", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).CometBFTTipHeight), ctx)
}

// DelegationsByStatus mocks base method.
func (m *MockBabylonNodeAdapter) DelegationsByStatus(status types0.BTCDelegationStatus, limit uint64) ([]Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegationsByStatus", status, limit)
	ret0, _ := ret[0].([]Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelegationsByStatus indicates an expected call of DelegationsByStatus.
func (mr *MockBabylonNodeAdapterMockRecorder) DelegationsByStatus(status, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegationsByStatus", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).DelegationsByStatus), status, limit)
}

// DelegationsModifedInBlock mocks base method.
func (m *MockBabylonNodeAdapter) DelegationsModifiedInBlock(ctx context.Context, height int64, eventTypes []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegationsModifiedInBlock", ctx, height, eventTypes)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelegationsModifedInBlock indicates an expected call of DelegationsModifedInBlock.
func (mr *MockBabylonNodeAdapterMockRecorder) DelegationsModifedInBlock(ctx, height, eventTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegationsModifiedInBlock", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).DelegationsModifiedInBlock), ctx, height, eventTypes)
}

// IsDelegationActive mocks base method.
func (m *MockBabylonNodeAdapter) IsDelegationActive(stakingTxHash chainhash.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelegationActive", stakingTxHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelegationActive indicates an expected call of IsDelegationActive.
func (mr *MockBabylonNodeAdapterMockRecorder) IsDelegationActive(stakingTxHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelegationActive", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).IsDelegationActive), stakingTxHash)
}

// IsDelegationVerified mocks base method.
func (m *MockBabylonNodeAdapter) IsDelegationVerified(stakingTxHash chainhash.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelegationVerified", stakingTxHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelegationVerified indicates an expected call of IsDelegationVerified.
func (mr *MockBabylonNodeAdapterMockRecorder) IsDelegationVerified(stakingTxHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelegationVerified", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).IsDelegationVerified), stakingTxHash)
}

// Params mocks base method.
func (m *MockBabylonNodeAdapter) Params() (*BabylonParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(*BabylonParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockBabylonNodeAdapterMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).Params))
}

// QueryHeaderDepth mocks base method.
func (m *MockBabylonNodeAdapter) QueryHeaderDepth(headerHash *chainhash.Hash) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHeaderDepth", headerHash)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHeaderDepth indicates an expected call of QueryHeaderDepth.
func (mr *MockBabylonNodeAdapterMockRecorder) QueryHeaderDepth(headerHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHeaderDepth", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).QueryHeaderDepth), headerHash)
}

// ReportUnbonding mocks base method.
func (m *MockBabylonNodeAdapter) ReportUnbonding(ctx context.Context, stakingTxHash chainhash.Hash, stakeSpendingTx *wire.MsgTx, inclusionProof *types0.InclusionProof, fundingTxs [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportUnbonding", ctx, stakingTxHash, stakeSpendingTx, inclusionProof, fundingTxs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportUnbonding indicates an expected call of ReportUnbonding.
func (mr *MockBabylonNodeAdapterMockRecorder) ReportUnbonding(ctx, stakingTxHash, stakeSpendingTx, inclusionProof, fundingTxs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUnbonding", reflect.TypeOf((*MockBabylonNodeAdapter)(nil).ReportUnbonding), ctx, stakingTxHash, stakeSpendingTx, inclusionProof, fundingTxs)
}
