// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/expected_babylon_client.go

// Package monitor is a generated GoMock package.
package monitor

import (
	reflect "reflect"

	types "github.com/babylonlabs-io/babylon/x/btclightclient/types"
	types0 "github.com/babylonlabs-io/babylon/x/checkpointing/types"
	types1 "github.com/babylonlabs-io/babylon/x/epoching/types"
	types2 "github.com/babylonlabs-io/babylon/x/monitor/types"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	query "github.com/cosmos/cosmos-sdk/types/query"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonQueryClient is a mock of BabylonQueryClient interface.
type MockBabylonQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonQueryClientMockRecorder
}

// MockBabylonQueryClientMockRecorder is the mock recorder for MockBabylonQueryClient.
type MockBabylonQueryClientMockRecorder struct {
	mock *MockBabylonQueryClient
}

// NewMockBabylonQueryClient creates a new mock instance.
func NewMockBabylonQueryClient(ctrl *gomock.Controller) *MockBabylonQueryClient {
	mock := &MockBabylonQueryClient{ctrl: ctrl}
	mock.recorder = &MockBabylonQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonQueryClient) EXPECT() *MockBabylonQueryClientMockRecorder {
	return m.recorder
}

// BTCHeaderChainTip mocks base method.
func (m *MockBabylonQueryClient) BTCHeaderChainTip() (*types.QueryTipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCHeaderChainTip")
	ret0, _ := ret[0].(*types.QueryTipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCHeaderChainTip indicates an expected call of BTCHeaderChainTip.
func (mr *MockBabylonQueryClientMockRecorder) BTCHeaderChainTip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCHeaderChainTip", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCHeaderChainTip))
}

// BlsPublicKeyList mocks base method.
func (m *MockBabylonQueryClient) BlsPublicKeyList(epochNumber uint64, pagination *query.PageRequest) (*types0.QueryBlsPublicKeyListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlsPublicKeyList", epochNumber, pagination)
	ret0, _ := ret[0].(*types0.QueryBlsPublicKeyListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlsPublicKeyList indicates an expected call of BlsPublicKeyList.
func (mr *MockBabylonQueryClientMockRecorder) BlsPublicKeyList(epochNumber, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlsPublicKeyList", reflect.TypeOf((*MockBabylonQueryClient)(nil).BlsPublicKeyList), epochNumber, pagination)
}

// ContainsBTCBlock mocks base method.
func (m *MockBabylonQueryClient) ContainsBTCBlock(blockHash *chainhash.Hash) (*types.QueryContainsBytesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsBTCBlock", blockHash)
	ret0, _ := ret[0].(*types.QueryContainsBytesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsBTCBlock indicates an expected call of ContainsBTCBlock.
func (mr *MockBabylonQueryClientMockRecorder) ContainsBTCBlock(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsBTCBlock", reflect.TypeOf((*MockBabylonQueryClient)(nil).ContainsBTCBlock), blockHash)
}

// CurrentEpoch mocks base method.
func (m *MockBabylonQueryClient) CurrentEpoch() (*types1.QueryCurrentEpochResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEpoch")
	ret0, _ := ret[0].(*types1.QueryCurrentEpochResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentEpoch indicates an expected call of CurrentEpoch.
func (mr *MockBabylonQueryClientMockRecorder) CurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEpoch", reflect.TypeOf((*MockBabylonQueryClient)(nil).CurrentEpoch))
}

// EndedEpochBTCHeight mocks base method.
func (m *MockBabylonQueryClient) EndedEpochBTCHeight(epochNum uint64) (*types2.QueryEndedEpochBtcHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndedEpochBTCHeight", epochNum)
	ret0, _ := ret[0].(*types2.QueryEndedEpochBtcHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndedEpochBTCHeight indicates an expected call of EndedEpochBTCHeight.
func (mr *MockBabylonQueryClientMockRecorder) EndedEpochBTCHeight(epochNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndedEpochBTCHeight", reflect.TypeOf((*MockBabylonQueryClient)(nil).EndedEpochBTCHeight), epochNum)
}

// IsRunning mocks base method.
func (m *MockBabylonQueryClient) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockBabylonQueryClientMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockBabylonQueryClient)(nil).IsRunning))
}

// RawCheckpoint mocks base method.
func (m *MockBabylonQueryClient) RawCheckpoint(epochNumber uint64) (*types0.QueryRawCheckpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawCheckpoint", epochNumber)
	ret0, _ := ret[0].(*types0.QueryRawCheckpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawCheckpoint indicates an expected call of RawCheckpoint.
func (mr *MockBabylonQueryClientMockRecorder) RawCheckpoint(epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawCheckpoint", reflect.TypeOf((*MockBabylonQueryClient)(nil).RawCheckpoint), epochNumber)
}

// ReportedCheckpointBTCHeight mocks base method.
func (m *MockBabylonQueryClient) ReportedCheckpointBTCHeight(hashStr string) (*types2.QueryReportedCheckpointBtcHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportedCheckpointBTCHeight", hashStr)
	ret0, _ := ret[0].(*types2.QueryReportedCheckpointBtcHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportedCheckpointBTCHeight indicates an expected call of ReportedCheckpointBTCHeight.
func (mr *MockBabylonQueryClientMockRecorder) ReportedCheckpointBTCHeight(hashStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportedCheckpointBTCHeight", reflect.TypeOf((*MockBabylonQueryClient)(nil).ReportedCheckpointBTCHeight), hashStr)
}

// Start mocks base method.
func (m *MockBabylonQueryClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBabylonQueryClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBabylonQueryClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockBabylonQueryClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBabylonQueryClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBabylonQueryClient)(nil).Stop))
}
