// Code generated by MockGen. DO NOT EDIT.
// Source: submitter/expected_babylon_client.go

// Package submitter is a generated GoMock package.
package submitter

import (
	reflect "reflect"

	types "github.com/babylonlabs-io/babylon/x/btccheckpoint/types"
	types0 "github.com/babylonlabs-io/babylon/x/checkpointing/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonQueryClient is a mock of BabylonQueryClient interface.
type MockBabylonQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonQueryClientMockRecorder
}

// MockBabylonQueryClientMockRecorder is the mock recorder for MockBabylonQueryClient.
type MockBabylonQueryClientMockRecorder struct {
	mock *MockBabylonQueryClient
}

// NewMockBabylonQueryClient creates a new mock instance.
func NewMockBabylonQueryClient(ctrl *gomock.Controller) *MockBabylonQueryClient {
	mock := &MockBabylonQueryClient{ctrl: ctrl}
	mock.recorder = &MockBabylonQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonQueryClient) EXPECT() *MockBabylonQueryClientMockRecorder {
	return m.recorder
}

// BTCCheckpointParams mocks base method.
func (m *MockBabylonQueryClient) BTCCheckpointParams() (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCCheckpointParams")
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCCheckpointParams indicates an expected call of BTCCheckpointParams.
func (mr *MockBabylonQueryClientMockRecorder) BTCCheckpointParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCCheckpointParams", reflect.TypeOf((*MockBabylonQueryClient)(nil).BTCCheckpointParams))
}

// RawCheckpointList mocks base method.
func (m *MockBabylonQueryClient) RawCheckpointList(status types0.CheckpointStatus, pagination *query.PageRequest) (*types0.QueryRawCheckpointListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawCheckpointList", status, pagination)
	ret0, _ := ret[0].(*types0.QueryRawCheckpointListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawCheckpointList indicates an expected call of RawCheckpointList.
func (mr *MockBabylonQueryClientMockRecorder) RawCheckpointList(status, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawCheckpointList", reflect.TypeOf((*MockBabylonQueryClient)(nil).RawCheckpointList), status, pagination)
}
